import Foundation

// –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
// –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏ –æ—á–µ—Ä–µ–¥–∏. –ö–∞–∂–¥–æ–π –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–æ–º–µ—Ä 1,2,3.
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1,2,3 - 2,3,1 - 3,1,2

func printSeparator() {
    sleep(1)
    print("üçé")
}

func threadLauncher(threads: [Thread]) {
    for (i, t) in threads.enumerated() {
        if i == 0 {
            t.qualityOfService = .userInteractive
        } else if i == 1 {
            t.qualityOfService = .userInitiated
        } else {
            t.qualityOfService = .utility
        }
    }
    threads.forEach { t in
        t.start()
    }
}

func grabThreads() -> [Thread] {
    [Thread {
        print("1")
        },
     Thread {
        print("2")
        },
     Thread {
        print("3")
        }
    ]
}

print("–≤–∞—Ä–∏–∞–Ω—Ç 1 (–ø–æ—Ç–æ–∫–∏):\n----------")

var tt = grabThreads()
threadLauncher(threads: [tt[0], tt[1], tt[2]])

printSeparator()

tt = grabThreads()
threadLauncher(threads: [tt[1], tt[2], tt[0]])

printSeparator()

tt = grabThreads()
threadLauncher(threads: [tt[2], tt[0], tt[1]])

/* sleep(1)
print("\n–≤–∞—Ä–∏–∞–Ω—Ç 2 (–æ—á–µ—Ä–µ–¥–∏):\n----------")

//
// –≤–∞—Ä–∏–∞–Ω—Ç 2: –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –≤—Ä–æ–¥–µ –ø–æ—Ç–æ–∫–∏, –Ω–æ –≤ —É—Å–ª–æ–≤–∏–∏ –∑–∞–¥–∞–Ω–∏—è –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å –Ω—É–∂–Ω–æ –æ—á–µ—Ä–µ–¥–∏ ... üòµ
//

func queueLauncher(_ xx: [Int]) {
    for (i, x) in xx.enumerated() {
        let q: DispatchQueue
        if i == 0 {
            q = DispatchQueue.global(qos: .userInteractive)
        } else if i == 1 {
            q = DispatchQueue.global(qos: .default)
        } else {
            q = DispatchQueue.global(qos: .utility)
        }
        q.async {
            print(x)
        }
    }
    printSeparator()
}

queueLauncher([1, 2, 3])
queueLauncher([2, 3, 1])
queueLauncher([3, 1, 2]) */

sleep(5)
